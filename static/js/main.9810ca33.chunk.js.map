{"version":3,"sources":["components/Filter/Filter.module.css","components/NumberContacts/NumberContacts.module.css","components/Container/Container.module.css","components/ContactList/ContactList.module.css","redux/contacts/contacts-selectors.js","components/Container/Container.js","redux/contacts/contacts-actions.js","components/ContactForm/ContactForm.js","components/Filter/Filter.js","components/ContactList/ContactListItem/ContactLIstItem.js","components/ContactList/ContactList.js","components/NumberContacts/NumberContacts.js","App.js","redux/contacts/contacts-reducers.js","redux/store.js","index.js","components/ContactForm/ContactForm.module.css","components/ContactList/ContactListItem/ContactListItem.module.css"],"names":["module","exports","getContacts","state","contacts","items","getFilter","filter","filterContacts","createSelector","normalizedFilter","toLowerCase","name","includes","Container","children","className","styles","container","addContact","createAction","number","payload","id","uuidv4","deleteContact","changeFilter","ContactForm","useState","setName","setNumber","useSelector","dispatch","useDispatch","handleChange","event","currentTarget","value","reset","contact__form","onSubmit","preventDefault","trim","checkingEmptyQuery","toast","warning","find","contact","checkingContactName","checkingContactNumber","info","contact__label","contact__input","placeholder","type","onChange","required","contact__btn","Filter","filter__label","filter__input","target","ContactListItem","contact__item","contact__info","contact__infoName","contact__infoNumber","btn__delete","onClick","ContactList","length","contact__list","map","NumberContacts","numberContacts","text","App","autoClose","createReducer","_","combineReducers","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","logger","contactsPersistCongig","key","storage","blacklist","store","configureStore","reducer","persistReducer","contactsReducer","devTools","process","persiststore","persistStore","ReactDOM","render","StrictMode","loading","persistor","document","getElementById"],"mappings":"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","file":"static/js/main.9810ca33.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"filter__label\":\"Filter_filter__label__15v8X\",\"filter__input\":\"Filter_filter__input__m_tfG\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"text\":\"NumberContacts_text__2puMR\",\"number\":\"NumberContacts_number__fxOFh\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Container_container__1esBh\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contact__list\":\"ContactList_contact__list__1H9qa\"};","import { createSelector } from '@reduxjs/toolkit';\n\nconst getContacts = state => state.contacts.items;\nconst getFilter = state => state.contacts.filter;\n\nconst filterContacts = createSelector(\n  [getContacts, getFilter],\n  (items, filter) => {\n    const normalizedFilter = filter.toLowerCase();\n    return items.filter(({ name }) =>\n      name.toLowerCase().includes(normalizedFilter),\n    );\n  },\n);\n\nexport { getContacts, getFilter, filterContacts };\n","import styles from './Container.module.css';\n\nfunction Container({ children }) {\n  return <div className={styles.container}>{children}</div>;\n}\n\nexport default Container;\n","import { v4 as uuidv4 } from 'uuid';\nimport { createAction } from '@reduxjs/toolkit';\n\nexport const addContact = createAction('contacts/Add', (name, number) => ({\n  payload: {\n    id: uuidv4(),\n    name,\n    number,\n  },\n}));\n\nexport const deleteContact = createAction('contacts/Delete');\n\nexport const changeFilter = createAction('contacts/ChangeFilter');\n\n// ===============  Step 1  ===============\n\n// import types from './contacts-types';\n\n// const addContact = (name, number) => ({\n//   type: types.ADD,\n//   payload: {\n//     id: uuidv4(),\n//     name,\n//     number,\n//   },\n// });\n\n// const deleteContact = contactId => ({\n//   type: types.DELETE,\n//   payload: contactId,\n// });\n\n// const changeFilter = value => ({\n//   type: types.CHANGE_FILTER,\n//   payload: value,\n// });\n\n// export { addContact, deleteContact, changeFilter };\n","import { useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { toast } from 'react-toastify';\n\nimport { addContact } from '../../redux/contacts/contacts-actions';\nimport { getContacts } from '../../redux/contacts/contacts-selectors';\n\nimport styles from './ContactForm.module.css';\n\nfunction ContactForm() {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n  const contacts = useSelector(getContacts);\n  const dispatch = useDispatch();\n\n  const handleChange = event => {\n    const { name, value } = event.currentTarget;\n\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n      case 'number':\n        setNumber(value);\n        break;\n      default:\n        break;\n    }\n  };\n\n  const checkingEmptyQuery = (name, number) => {\n    return name.trim() === '' || number.trim() === '';\n  };\n\n  const checkingContactName = name => {\n    return contacts.find(\n      contact => contact.name.toLowerCase() === name.toLowerCase(),\n    );\n  };\n\n  const checkingContactNumber = number => {\n    return contacts.find(contact => contact.number === number);\n  };\n\n  const handleSubmit = event => {\n    event.preventDefault();\n\n    if (checkingEmptyQuery(name, number)) {\n      toast.warning('Enter contact name and number phone!');\n      return;\n    }\n\n    if (checkingContactName(name, number)) {\n      toast.info(`This ${name} is already in the phonebook!`);\n      return;\n    }\n\n    if (checkingContactNumber(number)) {\n      toast.info(`This ${number} is already in the phonebook!`);\n      return;\n    }\n\n    dispatch(addContact(name, number));\n\n    reset();\n  };\n\n  const reset = () => {\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <form className={styles.contact__form} onSubmit={handleSubmit}>\n      <label className={styles.contact__label}>\n        Name\n        <input\n          className={styles.contact__input}\n          placeholder=\"Enter name...\"\n          type=\"text\"\n          value={name}\n          name=\"name\"\n          onChange={handleChange}\n          required\n        />\n      </label>\n\n      <label className={styles.contact__label}>\n        Number\n        <input\n          className={styles.contact__input}\n          placeholder=\"Enter number...\"\n          type=\"tel\"\n          value={number}\n          name=\"number\"\n          onChange={handleChange}\n          required\n        />\n      </label>\n\n      <button className={styles.contact__btn} type=\"submit\">\n        Add contact\n      </button>\n    </form>\n  );\n}\n\nexport default ContactForm;\n\n// ===============  Step 1  ===============\n\n// import { useSelector, useDispatch } from 'react-redux';\n// import { connect } from 'react-redux';\n\n// const mapStateToProps = state => ({\n//   contacts: state.contacts.items,\n// });\n\n// const mapDispatchToProps = dispatch => ({\n//   onAddContact: (name, number) => dispatch(addContact(name, number)),\n// });\n\n// export default connect(mapStateToProps, mapDispatchToProps)(ContactForm);\n","import { useSelector, useDispatch } from 'react-redux';\n\nimport { getFilter } from '../../redux/contacts/contacts-selectors';\nimport { changeFilter } from '../../redux/contacts/contacts-actions';\n\nimport styles from './Filter.module.css';\n\nconst Filter = () => {\n  const value = useSelector(getFilter);\n  const dispatch = useDispatch();\n\n  const onChange = event => dispatch(changeFilter(event.target.value));\n\n  return (\n    <label className={styles.filter__label}>\n      Find contact by name\n      <input\n        placeholder=\"Enter name...\"\n        className={styles.filter__input}\n        type=\"text\"\n        value={value}\n        name=\"filter\"\n        onChange={onChange}\n      />\n    </label>\n  );\n};\n\nexport default Filter;\n\n// ===============  Step 1  ===============\n\n// import { connect } from 'react-redux';\n\n// Filter.propTypes = {\n//   value: PropTypes.string.isRequired,\n//   onChange: PropTypes.func.isRequired,\n// };\n\n// const mapStateToProps = state => ({\n//   value: state.contacts.filter,\n// });\n\n// const mapDispatchToProps = dispatch => ({\n//   onChange: event => dispatch(changeFilter(event.target.value)),\n// });\n\n// export default connect(mapStateToProps, mapDispatchToProps)(Filter);\n","import styles from './ContactListItem.module.css';\n\nconst ContactListItem = ({ id, name, number, deleteContact }) => {\n  return (\n    <li className={styles.contact__item} key={id}>\n      <p className={styles.contact__info}>\n        <span className={styles.contact__infoName}>{name}:</span>\n        <span className={styles.contact__infoNumber}> {number}</span>\n      </p>\n\n      <button\n        className={styles.btn__delete}\n        type=\"button\"\n        onClick={() => deleteContact(id)}\n      >\n        Delete\n      </button>\n    </li>\n  );\n};\n\nexport default ContactListItem;\n","import { useSelector, useDispatch } from 'react-redux';\n\nimport { deleteContact } from '../../redux/contacts/contacts-actions';\nimport { filterContacts } from '../../redux/contacts/contacts-selectors';\nimport ContactListItem from './ContactListItem';\n\nimport styles from './ContactList.module.css';\n\nconst ContactList = () => {\n  const contacts = useSelector(filterContacts);\n  const dispatch = useDispatch();\n\n  if (contacts.length === 0) return null;\n  return (\n    <ul className={styles.contact__list}>\n      {contacts.map(({ id, name, number }) => (\n        <ContactListItem\n          key={id}\n          name={name}\n          number={number}\n          deleteContact={() => dispatch(deleteContact(id))}\n        />\n      ))}\n    </ul>\n  );\n};\n\nexport default ContactList;\n\n// ===============  Step 1  ===============\n\n// import { connect } from 'react-redux';\n\n// const getFilterContacts = (allContacts, filter) => {\n//   const normalizedFilter = filter.toLowerCase();\n\n//   return allContacts.filter(({ name }) =>\n//     name.toLowerCase().includes(normalizedFilter),\n//   );\n// };\n\n// const mapStateToProps = ({ contacts: { items, filter } }) => ({\n//   contacts: getFilterContacts(items, filter),\n// });\n\n// const mapDispatchToProps = dispatch => ({\n//   onDeleteContact: id => dispatch(deleteContact(id)),\n// });\n\n// export default connect(mapStateToProps, mapDispatchToProps)(ContactList);\n","import { useSelector } from 'react-redux';\nimport { getContacts } from '../../redux/contacts/contacts-selectors';\n\nimport styles from './NumberContacts.module.css';\n\nconst NumberContacts = () => {\n  const contacts = useSelector(getContacts);\n\n  const numberContacts = contacts.length;\n\n  return (\n    <p className={styles.text}>\n      Number of contacts:\n      <span className={styles.number}> {numberContacts}</span>\n    </p>\n  );\n};\n\nexport default NumberContacts;\n","import { useSelector } from 'react-redux';\nimport { ToastContainer } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\nimport { getContacts } from './redux/contacts/contacts-selectors';\nimport Container from './components/Container';\nimport ContactForm from './components/ContactForm';\nimport Filter from './components/Filter';\nimport ContactList from './components/ContactList';\nimport NumberContacts from './components/NumberContacts';\n\nimport './App.css';\n\nfunction App() {\n  const contacts = useSelector(getContacts);\n\n  return (\n    <div className=\"App\">\n      <Container>\n        <h1 className=\"main__title\">Phonebook</h1>\n        <ContactForm />\n\n        {contacts.length > 0 ? (\n          <div>\n            <h2 className=\"section__title\">Contacts</h2>\n            <Filter />\n            <ContactList />\n            <NumberContacts />\n          </div>\n        ) : (\n          <p>PHONE BOOK IS EMPTY</p>\n        )}\n\n        <ToastContainer autoClose={3000} />\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n","import { combineReducers } from 'redux';\nimport { createReducer } from '@reduxjs/toolkit';\n\nimport { addContact, deleteContact, changeFilter } from './contacts-actions';\n\nconst items = createReducer([], {\n  [addContact]: (state, { payload }) => [...state, payload],\n  [deleteContact]: (state, { payload }) =>\n    state.filter(({ id }) => id !== payload),\n});\n\nconst filter = createReducer('', {\n  [changeFilter]: (_, { payload }) => payload,\n});\n\nexport default combineReducers({\n  items,\n  filter,\n});\n\n// ===============  Step 1  ===============\n\n// import types from './contacts-types';\n\n// const items = (state = [], { type, payload }) => {\n//   switch (type) {\n//     case types.ADD:\n//       return [...state, payload];\n\n//     case types.DELETE:\n//       return state.filter(contact => contact.id !== payload);\n\n//     default:\n//       return state;\n//   }\n// };\n\n// const filter = (state = '', { type, payload }) => {\n//   switch (type) {\n//     case 'contacts/ChangeFilter':\n//       return payload;\n\n//     default:\n//       return state;\n//   }\n// };\n","// import { createStore, combineReducers } from 'redux';\n// import { combineReducers } from 'redux';\nimport { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\n// import { composeWithDevTools } from 'redux-devtools-extension';\nimport contactsReducer from './contacts/contacts-reducers.js';\nimport logger from 'redux-logger';\nimport {\n  persistStore,\n  persistReducer,\n  FLUSH,\n  REHYDRATE,\n  PAUSE,\n  PERSIST,\n  PURGE,\n  REGISTER,\n} from 'redux-persist';\nimport storage from 'redux-persist/lib/storage';\n\n// const rootReducer = combineReducers({\n//   contacts: contactsReducer,\n// });\n\nconst middleware = [\n  ...getDefaultMiddleware({\n    serializableCheck: {\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\n    },\n  }),\n  logger,\n];\n\nconst contactsPersistCongig = {\n  key: 'contacts',\n  storage,\n  blacklist: ['filter'],\n};\n\n// const rootReducer = combineReducers({\n//   contacts: persistReducer(persistCongig, contactsReducer),\n// });\n\n// const store = createStore(rootReducer, composeWithDevTools());\nexport const store = configureStore({\n  reducer: {\n    contacts: persistReducer(contactsPersistCongig, contactsReducer),\n  },\n  middleware,\n  devTools: process.env.NODE_ENV === 'development',\n});\n\nexport const persiststore = persistStore(store);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { Provider } from 'react-redux';\nimport { store, persiststore } from './redux/store';\nimport { PersistGate } from 'redux-persist/integration/react';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <PersistGate loading={null} persistor={persiststore}>\n        <App />\n      </PersistGate>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contact__form\":\"ContactForm_contact__form__wFR1e\",\"contact__label\":\"ContactForm_contact__label__ARYjQ\",\"contact__input\":\"ContactForm_contact__input__l5Y_X\",\"contact__btn\":\"ContactForm_contact__btn__2rR_o\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contact__item\":\"ContactListItem_contact__item__3-sg9\",\"contact__info\":\"ContactListItem_contact__info__29x8e\",\"contact__infoNumber\":\"ContactListItem_contact__infoNumber__2Wc5V\",\"btn__delete\":\"ContactListItem_btn__delete__33l5q\"};"],"sourceRoot":""}